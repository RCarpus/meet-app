{"version":3,"sources":["Event.js","EventList.js","alert.js","CitySearch.js","NumberOfEvents.js","WelcomeScreen.jsx","mock-data.js","api.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","props","handleClickDetailsButton","e","current","state","expanded","setState","eventDetailsButtonText","this","event","className","summary","start","dateTime","location","href","htmlLink","description","onClick","Component","EventList","events","length","map","id","Alert","getStyle","color","style","text","InfoAlert","ErrorAlert","WarningAlert","CitySearch","query","suggestions","showSuggestions","undefined","infoText","handleInputChanged","value","target","locations","filter","toUpperCase","indexOf","handleSuggestionClicked","suggestion","number","updateEvents","numberOfEvents","htmlFor","type","onChange","onFocus","display","NumberOfEvents","cleanedValue","RemoveNonNumeric","displayErrorText","updateNumberOfEvents","replace","currentNumberOfEvents","displayWarning","WelcomeScreen","showWelcomeScreen","align","src","alt","getAccessToken","rel","mockData","JSON","parse","stringify","extractLocations","Set","checkToken","accessToken","a","fetch","then","res","json","catch","error","result","removeQuery","window","history","pushState","pathname","newurl","protocol","host","getToken","code","encodeCode","encodeURIComponent","access_token","localStorage","setItem","getEvents","startsWith","navigator","onLine","data","getItem","NProgress","token","url","axios","get","done","tokenCheck","removeItem","searchParams","URLSearchParams","search","results","authUrl","App","locationEvents","slice","mounted","tokenIsValid","React","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","atatus","install","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","response","contentType","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.7abce416.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n// import './css/Event.css';\r\n\r\nclass Event extends Component {\r\n  constructor(props) {\r\n    super();\r\n\r\n    this.state = {\r\n      expanded: false,\r\n      eventDetailsButtonText: 'More details'\r\n    };\r\n  }\r\n\r\n  handleClickDetailsButton = (e) => {\r\n    const current = this.state.expanded;\r\n    this.setState({\r\n      expanded: current ? false : true,\r\n      eventDetailsButtonText: current ? 'More details' : 'Hide details'\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { expanded, eventDetailsButtonText } = this.state;\r\n    const { event } = this.props;\r\n    return (\r\n      <div className='event'>\r\n        <h2 className='event__name'>{event.summary}</h2>\r\n        <p className='event__start'>{event.start.dateTime}</p>\r\n        <p className='event__title-line-2'>\r\n          <span className='event__title-line-2__at-sign'>@</span>\r\n          <span className='event__title-line-2__title'>{event.summary}</span>\r\n          <span className='event__title-line-2__pipe'> | </span>\r\n          <span className='event__title-line-2__city'>{event.location}</span>\r\n        </p>\r\n\r\n        {/* expanded toggled by the '.event__details-button' */}\r\n        {expanded &&\r\n          <div className='event__more-details' >\r\n            <h3 className='event__more-details__about-label'>About event</h3>\r\n            <p className='event__more-details__link-line'>\r\n              <a className='event__more-details__link-line__link' href={event.htmlLink} >{event.htmlLink}</a>\r\n            </p>\r\n            <p className='event__more-details__description'>{event.description}</p>\r\n          </div>\r\n        }\r\n\r\n        <button className='event__details-button'\r\n          onClick={(e) => this.handleClickDetailsButton(e)}>{eventDetailsButtonText}</button>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Event;","import React, { Component } from 'react';\r\nimport Event from './Event';\r\n\r\nclass EventList extends Component {\r\n  render() {\r\n    const { events } = this.props;\r\n\r\n    return (\r\n      <ul className=\"EventList\">\r\n        {/* Show a loading message when number of events is 0. This also triggers when the user asked for 0 events. */}\r\n        {events.length === 0 &&\r\n          <div>\r\n            <h2>Loading...</h2>\r\n            <p>(or you've set the number of events to 0. But you wouldn't want to do that, would you?)</p>\r\n          </div>}\r\n\r\n        {events.map(event =>\r\n          <li key={event.id}>\r\n            <Event event={event} />\r\n          </li>\r\n        )}\r\n      </ul>\r\n    );\r\n  };\r\n}\r\n\r\nexport default EventList;","import React, { Component } from 'react';\r\n\r\nclass Alert extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.color = null;\r\n  }\r\n\r\n  getStyle = () => {\r\n    return {\r\n      color: this.color\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Alert\">\r\n        <p style={this.getStyle()} className=\"error-text\">{this.props.text}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass InfoAlert extends Alert {\r\n  constructor(props) {\r\n    super(props);\r\n    this.color = 'yellow';\r\n  }\r\n}\r\n\r\nclass ErrorAlert extends Alert {\r\n  constructor(props) {\r\n    super(props);\r\n    this.color = 'red';\r\n  }\r\n}\r\n\r\nclass WarningAlert extends Alert {\r\n  constructor(props) {\r\n    super(props);\r\n    this.color = 'orange';\r\n  }\r\n}\r\n\r\nexport { InfoAlert, ErrorAlert, WarningAlert };","import React, { Component } from 'react';\r\nimport { InfoAlert } from './alert';\r\n\r\nclass CitySearch extends Component {\r\n  state = {\r\n    query: '',\r\n    suggestions: [],\r\n    showSuggestions: undefined,\r\n    infoText: null\r\n  }\r\n\r\n  handleInputChanged = (event) => {\r\n    /**\r\n     * takes the text written in the suggestion box,\r\n     * filters the list of locations against that text.\r\n     * sets an info message if no suggestions are found\r\n     */\r\n\r\n    // Get value from input field\r\n    const value = event.target.value;\r\n\r\n    // render suggestions box (this is set to false by handleSuggestionClicked)\r\n    this.setState({ showSuggestions: true });\r\n    // Filter the locations list against the text input\r\n    const suggestions = this.props.locations.filter((location) => {\r\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    });\r\n    // if no suggestions, set text for info box\r\n    if (suggestions.length === 0) {\r\n      this.setState({\r\n        query: value,\r\n        infoText: 'We can not find the city you are looking for. Please try another city',\r\n      });\r\n    } else {\r\n      // turns off info text if it was defined, sets suggestions in state\r\n      return this.setState({\r\n        query: value,\r\n        suggestions,\r\n        infoText: ''\r\n      });\r\n    }\r\n  }\r\n\r\n  handleSuggestionClicked = (suggestion, number) => {\r\n    /**\r\n     * When a user clicks on a suggestion, updateEvents based on the\r\n     * suggestion and the current selected number of events,\r\n     * and hide the suggestions list\r\n     */\r\n    this.setState({\r\n      query: suggestion,\r\n      showSuggestions: false,\r\n      infoText: ''\r\n    });\r\n    this.props.updateEvents(suggestion, number);\r\n  }\r\n\r\n  render() {\r\n    const { numberOfEvents } = this.props; // This is used in updateEvents within handleSuggestionClicked\r\n\r\n    return (\r\n      <div className=\"citySearch\">\r\n        <div className=\"citySearch__alert\">\r\n          {/* Renders when no matching city has been found */}\r\n          <InfoAlert text={this.state.infoText} />\r\n        </div>\r\n        \r\n        <div className=\"citySearch__grid\">\r\n          <label htmlFor={this.state.query}>Search for a city</label>\r\n          <input type=\"text\"\r\n            className=\"city\"\r\n            value={this.state.query}\r\n            onChange={this.handleInputChanged}\r\n            onFocus={() => { this.setState({ showSuggestions: true }) }}\r\n          />\r\n\r\n          <ul className=\"suggestions\" style={this.state.showSuggestions ? {} : { display: 'none' }}>\r\n            {this.state.suggestions.map((suggestion) => (\r\n              <li key={suggestion} onClick={() => this.handleSuggestionClicked(suggestion, numberOfEvents)}>{suggestion}</li>\r\n            ))}\r\n            <li key=\"all\" onClick={() => this.handleSuggestionClicked(\"all\", numberOfEvents)}>\r\n              <b >See all cities</b>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CitySearch;","import React, { Component } from 'react';\r\nimport { ErrorAlert, WarningAlert } from './alert';\r\n\r\nclass NumberOfEvents extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      number: 32,\r\n      displayErrorText: null\r\n    };\r\n  }\r\n\r\n  handleInputChanged = (event) => {\r\n    /**\r\n     * calls updateNumberOfEvents using the value in the input field.\r\n     * First cleans the input and sets an error message if the user\r\n     * tries to enter a non-numeric value\r\n     */\r\n    let value = event.target.value;\r\n    let cleanedValue = this.RemoveNonNumeric(value);\r\n\r\n    if (value !== cleanedValue) {\r\n      this.setState({\r\n        number: cleanedValue,\r\n        displayErrorText: true\r\n      })\r\n    } else {\r\n      this.setState({\r\n        number: cleanedValue,\r\n        displayErrorText: false\r\n      });\r\n    }\r\n\r\n    if (this.props.updateNumberOfEvents)\r\n      this.props.updateNumberOfEvents(cleanedValue);\r\n\r\n  }\r\n\r\n  RemoveNonNumeric = (text) => {\r\n    // helper function for handleInputChanged\r\n    return text.replace(/[^0-9]/g, '');\r\n  }\r\n\r\n\r\n  render() {\r\n    const { currentNumberOfEvents } = this.props;\r\n    const { number, displayErrorText } = this.state;\r\n    const displayWarning = currentNumberOfEvents < number;\r\n    const warningText = 'There are not that many events available';\r\n    const errorText = 'Number of Events must be a non-negative integer';\r\n\r\n    return (\r\n      <div className=\"number-of-events\">\r\n        <div className=\"number-of-events__error\">\r\n          {/* warning to tell user that they have specified more events than what is available for that city */}\r\n          { displayWarning && <WarningAlert text={warningText} />}\r\n\r\n          {/* warning to tell user that they tried to enter a non-numeric value */}\r\n          { displayErrorText && <ErrorAlert text={errorText} /> }\r\n        </div>\r\n\r\n        <div className=\"number-of-events__grid\">\r\n          <label id=\"number-of-events__label\" htmlFor=\"number-of-events__input\">Number of Events:</label>\r\n          <input id=\"number-of-events__input\" value={this.state.number} onChange={this.handleInputChanged} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NumberOfEvents;","import React from \"react\";\r\nimport './css/WelcomeScreen.css';\r\nfunction WelcomeScreen(props) {\r\n  return props.showWelcomeScreen ?\r\n    (\r\n      <div className=\"WelcomeScreen\">\r\n        <div className=\"WelcomeScreen__text\">\r\n          <h1>Welcome to the Meet app</h1>\r\n          <h4>\r\n            Log in to see upcoming events around the world for\r\n            full-stack\r\n            developers\r\n          </h4>\r\n        </div>\r\n        <div className=\"button_cont\" align=\"center\">\r\n          <div className=\"google-btn\">\r\n            <div className=\"google-icon-wrapper\">\r\n              <img\r\n                className=\"google-icon\"\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg\"\r\n                alt=\"Google sign-in\"\r\n              />\r\n            </div>\r\n            <button onClick={() => { props.getAccessToken() }}\r\n              rel=\"nofollow noopener\"\r\n              className=\"btn-text\"\r\n            >\r\n              <b>Sign in with google</b>\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <a\r\n          href=\"https://rcarpus.github.io/meet-app/privacy.html\"\r\n          rel=\"nofollow noopener\"\r\n          className=\"WelcomeScreen__privacy-policy\"\r\n        >\r\n          Privacy policy\r\n        </a>\r\n        <div className=\"WelcomeScreen__app-info\">\r\n          <h2>What does this app do, and why do I need to sign in with my Google account?</h2>\r\n          <p>\r\n            Meet app is a Progressive Web App (PWA) built with React and coded using a test-driven development process. The app uses the Google Calendar API to fetch upcoming events from a a CareerFoundry events calendar.\r\n          </p>\r\n          <p>\r\n            Once logged in, the app is a single page app with two inputs, one for a city name, and one for a number of events to show. Simply input your desired city and select it from the suggestions dropdown, then narrow down or increase the number of events shown with using the number input. Clicking on the \"more details\" button for an event will display a description and URL for the event. Clicking the event URL will redirect you to the Google Calendar event.\r\n          </p>\r\n          <p>\r\n            The Meet app is using https://www.googleapis.com/auth/calendar.events.readonly for\r\n            educational purposes only. The calendar accessed isn’t the user’s but a calendar provided by\r\n            CareerFoundry as part of their Full-Stack Immersion course. No user information is saved or\r\n            used within the application, and personal calendars aren’t accessed.\r\n          </p>\r\n          <p>\r\n            If you'd like to see more of my work, please visit <a href=\"http://rcarpus.github.io\" target={\"_blank\"}>my portfolio site at rcarpus.github.io</a>.\r\n          </p>\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n    : null\r\n}\r\nexport default WelcomeScreen;\r\n","const mockData = JSON.parse(JSON.stringify([{\r\n  \"kind\": \"calendar#event\",\r\n  \"etag\": \"\\\"3181161784712000\\\"\",\r\n  \"id\": \"4eahs9ghkhrvkld72hogu9ph3e_20200519T140000Z\",\r\n  \"status\": \"confirmed\",\r\n  \"htmlLink\": \"https://www.google.com/calendar/event?eid=NGVhaHM5Z2hraHJ2a2xkNzJob2d1OXBoM2VfMjAyMDA1MTlUMTQwMDAwWiBmdWxsc3RhY2t3ZWJkZXZAY2FyZWVyZm91bmRyeS5jb20\",\r\n  \"created\": \"2020-05-19T19:17:46.000Z\",\r\n  \"updated\": \"2020-05-27T12:01:32.356Z\",\r\n  \"summary\": \"Learn JavaScript\",\r\n  \"description\": \"Have you wondered how you can ask Google to show you the list of the top ten must-see places in London? And how Google presents you the list? How can you submit the details of an application? Well, JavaScript is doing these. :) \\n\\nJavascript offers interactivity to a dull, static website. Come, learn JavaScript with us and make those beautiful websites.\",\r\n  \"location\": \"London, UK\",\r\n  \"creator\": {\r\n   \"email\": \"fullstackwebdev@careerfoundry.com\",\r\n   \"self\": true\r\n  },\r\n  \"organizer\": {\r\n   \"email\": \"fullstackwebdev@careerfoundry.com\",\r\n   \"self\": true\r\n  },\r\n  \"start\": {\r\n   \"dateTime\": \"2020-05-19T16:00:00+02:00\",\r\n   \"timeZone\": \"Europe/Berlin\"\r\n  },\r\n  \"end\": {\r\n   \"dateTime\": \"2020-05-19T17:00:00+02:00\",\r\n   \"timeZone\": \"Europe/Berlin\"\r\n  },\r\n  \"recurringEventId\": \"4eahs9ghkhrvkld72hogu9ph3e\",\r\n  \"originalStartTime\": {\r\n   \"dateTime\": \"2020-05-19T16:00:00+02:00\",\r\n   \"timeZone\": \"Europe/Berlin\"\r\n  },\r\n  \"iCalUID\": \"4eahs9ghkhrvkld72hogu9ph3e@google.com\",\r\n  \"sequence\": 0,\r\n  \"reminders\": {\r\n   \"useDefault\": true\r\n  },\r\n  \"eventType\": \"default\"\r\n },\r\n {\r\n  \"kind\": \"calendar#event\",\r\n  \"etag\": \"\\\"3181159875584000\\\"\",\r\n  \"id\": \"3qtd6uscq4tsi6gc7nmmtpqlct_20200520T120000Z\",\r\n  \"status\": \"confirmed\",\r\n  \"htmlLink\": \"https://www.google.com/calendar/event?eid=M3F0ZDZ1c2NxNHRzaTZnYzdubW10cHFsY3RfMjAyMDA1MjBUMTIwMDAwWiBmdWxsc3RhY2t3ZWJkZXZAY2FyZWVyZm91bmRyeS5jb20\",\r\n  \"created\": \"2020-05-19T19:14:30.000Z\",\r\n  \"updated\": \"2020-05-27T11:45:37.792Z\",\r\n  \"summary\": \"React is Fun\",\r\n  \"description\": \"Love HTML, CSS, and JS? Want to become a cool front-end developer? \\n\\nReact is one of the most popular front-end frameworks. There is a huge number of job openings for React developers in most cities. \\n\\nJoin us in our free React training sessions and give your career a new direction. \",\r\n  \"location\": \"Berlin, Germany\",\r\n  \"creator\": {\r\n   \"email\": \"fullstackwebdev@careerfoundry.com\",\r\n   \"self\": true\r\n  },\r\n  \"organizer\": {\r\n   \"email\": \"fullstackwebdev@careerfoundry.com\",\r\n   \"self\": true\r\n  },\r\n  \"start\": {\r\n   \"dateTime\": \"2020-05-20T14:00:00+02:00\",\r\n   \"timeZone\": \"Europe/Berlin\"\r\n  },\r\n  \"end\": {\r\n   \"dateTime\": \"2020-05-20T15:00:00+02:00\",\r\n   \"timeZone\": \"Europe/Berlin\"\r\n  },\r\n  \"recurringEventId\": \"3qtd6uscq4tsi6gc7nmmtpqlct\",\r\n  \"originalStartTime\": {\r\n   \"dateTime\": \"2020-05-20T14:00:00+02:00\",\r\n   \"timeZone\": \"Europe/Berlin\"\r\n  },\r\n  \"iCalUID\": \"3qtd6uscq4tsi6gc7nmmtpqlct@google.com\",\r\n  \"sequence\": 0,\r\n  \"reminders\": {\r\n   \"useDefault\": true\r\n  },\r\n  \"eventType\": \"default\"\r\n }\r\n]));\r\n\r\nexport { mockData };","import { mockData } from './mock-data';\r\nimport axios from 'axios';\r\nimport NProgress from 'nprogress';\r\n\r\n/**\r\n * This function takes an events array, then uses map to create a new array with only locations.\r\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\r\n * The Set will remove all duplicates from the array.\r\n */\r\nexport const extractLocations = (events) => {\r\n  var extractLocations = events.map((event) => event.location);\r\n  var locations = [...new Set(extractLocations)];\r\n  return locations;\r\n};\r\n\r\nexport const checkToken = async (accessToken) => {\r\n  /**\r\n   * Send access token to the google API server.\r\n   * If the token is valid, get a json response.\r\n   * If the token is invalid, we get an error object.\r\n   * If we get an error, that is checked by ' || tokenCheck.error '\r\n   * in the getAccessToken function. This would cause you to be \r\n   * sent to the authorization screen to get a valid token.\r\n   */\r\n  const result = await fetch(\r\n    `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\r\n  )\r\n    .then((res) => res.json())\r\n    .catch((error) => error.json());\r\n  return result;\r\n}\r\n\r\nconst removeQuery = () => {\r\n  /**\r\n   * This function removes the code from the url\r\n   */\r\n  if (window.history.pushState && window.location.pathname) {\r\n    var newurl = \r\n      window.location.protocol +\r\n      '//' +\r\n      window.location.host +\r\n      window.location.pathname;\r\n    window.history.pushState('', '', newurl);\r\n  } else {\r\n    newurl = window.location.protocol + '//' + window.location.host;\r\n    window.history.pushState('', '', newurl);\r\n  }\r\n}\r\n\r\nconst getToken = async (code) => {\r\n  /**\r\n   * Takes an access code and sends it to the Google API to exchange for an access token\r\n   */\r\n  const encodeCode = encodeURIComponent(code);\r\n  const { access_token } = await fetch(\r\n    `https://hv2altwv0j.execute-api.us-east-1.amazonaws.com/dev/api/token/${encodeCode}`\r\n  )\r\n    .then((res) => {\r\n      return res.json();\r\n    })\r\n    .catch((error) => error);\r\n\r\n    access_token && localStorage.setItem('access_token', access_token);\r\n\r\n    return access_token;\r\n}\r\n\r\nexport const getEvents = async () => {\r\n  /**\r\n   * We use the mock data when we are testing on localhost,\r\n   * but we use the real API data when we are live.\r\n   */\r\n\r\n  //Return mock data while testing\r\n  if (window.location.href.startsWith('http://localhost')) {\r\n    return mockData;\r\n  } \r\n\r\n  // Return events saved in localStorage if we are offline\r\n  if (!navigator.onLine) {\r\n    const data = localStorage.getItem('lastEvents');\r\n    return data?JSON.parse(data).events:[];;\r\n  }\r\n\r\n  NProgress.start(); //This is a loading bar libray\r\n\r\n  // We are online so we go through the verification steps to download new events\r\n  const token = await getAccessToken();\r\n\r\n  if (token) {\r\n    removeQuery(); //remove the code from the url once we are done with it\r\n    const url = `https://hv2altwv0j.execute-api.us-east-1.amazonaws.com/dev/api/get-calendar-events/${token}`;\r\n    const result = await axios.get(url);\r\n    if (result.data) {\r\n      // Storing data in localStorage to use when offline\r\n      var locations = extractLocations(result.data.events);\r\n      localStorage.setItem('lastEvents', JSON.stringify(result.data));\r\n      localStorage.setItem('locations', JSON.stringify(locations));\r\n    }\r\n    NProgress.done();\r\n    return result.data.events;\r\n  }\r\n\r\n};\r\n\r\nexport const getAccessToken = async () => {\r\n  /* Step 1 is to check and see if the user already has a valid access token */\r\n  const accessToken = localStorage.getItem('access_token');\r\n  const tokenCheck = accessToken && (await checkToken(accessToken));\r\n\r\n  /* If there is no valid access token, we need to get one */\r\n  if (!accessToken || tokenCheck.error) {\r\n    await localStorage.removeItem('access_token');\r\n    const searchParams = new URLSearchParams(window.location.search);\r\n    /* There is no valid access token, but we can check for a valid code */\r\n    const code = await searchParams.get('code');\r\n    if (!code) {\r\n      /* There is no code, so redirect to my getAuthUrl endpoint */\r\n      const results = await axios.get(\r\n        \"https://hv2altwv0j.execute-api.us-east-1.amazonaws.com/dev/api/get-auth-url\"\r\n      );\r\n      const { authUrl } = results.data;\r\n      return (window.location.href = authUrl);\r\n    }\r\n    return code && getToken(code);\r\n  }\r\n  return accessToken;\r\n}","import React from 'react';\r\nimport './css/App.css';\r\nimport './css/nprogress.css';\r\nimport EventList from './EventList';\r\nimport CitySearch from './CitySearch';\r\nimport NumberOfEvents from './NumberOfEvents';\r\nimport { WarningAlert } from './alert';\r\nimport WelcomeScreen from './WelcomeScreen';\r\nimport { getEvents, extractLocations, checkToken, getAccessToken } from './api';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    events: [],\r\n    locations: [],\r\n    numberOfEvents: '32',\r\n    location: 'all',\r\n    showWelcomeScreen: undefined\r\n  };\r\n\r\n  async componentDidMount() {\r\n    this.mounted = true;\r\n    // Only attempt to access Google API if online\r\n    if (navigator.onLine & !window.location.href.startsWith('http://localhost')) {\r\n      // If we have an access token saved, check to see if it's valide\r\n      const accessToken = localStorage.getItem('access_token');\r\n      const tokenIsValid = (await checkToken(accessToken)).error ? false : true;\r\n      // If we were redirected from google login page, we will have a code in the URL\r\n      const searchParams = new URLSearchParams(window.location.search);\r\n      const code = searchParams.get('code');\r\n      // show the welcome screen if we are missing a valid code or token\r\n      this.setState({ showWelcomeScreen: !(code || tokenIsValid) });\r\n      // If we have a code an valid token, use them to get events\r\n      if ((code || tokenIsValid) && this.mounted) {\r\n        getEvents().then((events) => {\r\n          if (this.mounted) {\r\n            this.setState({\r\n              events: events.slice(0, this.state.numberOfEvents),\r\n              locations: extractLocations(events)\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n    // If offline, skip to getEvents. This function grabs from localStorage when offline.\r\n    else {\r\n      getEvents().then((events) => {\r\n        if (this.mounted) {\r\n          this.setState({\r\n            events: events.slice(0, this.state.numberOfEvents),\r\n            locations: extractLocations(events)\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.mounted = false;\r\n  }\r\n\r\n  updateEvents = (location = 'all', number = this.state.numberOfEvents) => {\r\n    /**\r\n     * Expects a location (or \"all\") and a number.\r\n     * Gets events, filters the event list by city name,\r\n     * reduces the number of events based on the specified number,\r\n     * and sets App state with new events list.\r\n     * \r\n     * Function is called from CitySearch directly\r\n     * and by NumberOfEvents indirectly (through updateNumberOfEvents)\r\n     */\r\n    getEvents().then((events) => {\r\n      const locationEvents = (location === 'all') ?\r\n        events.slice(0, number) :\r\n        events.filter((event) => event.location === location).slice(0, number);\r\n\r\n      this.setState({\r\n        events: locationEvents.slice(0, number),\r\n        location\r\n      });\r\n    });\r\n  }\r\n\r\n  updateNumberOfEvents = (numberOfEvents) => {\r\n    /**\r\n     * Function called by NumberOfEvents.\r\n     * \r\n     * Sets the App numberOfEvents state based on the input field\r\n     * THEN calls updateEvents with the current location and new numberOfEvents\r\n     */\r\n    this.setState({\r\n      numberOfEvents\r\n    }, this.updateEvents(this.state.location, numberOfEvents));\r\n  }\r\n\r\n\r\n  render() {\r\n    const { events, locations, numberOfEvents } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div id=\"App__header\">\r\n          <h1>Search for tech events</h1>\r\n          <p>This app uses the Google Calendar API in conjunction with a CareerFoundry calendar to fetch and filter events based on the city and number of events desired. Give it a try!</p>\r\n\r\n          {/* Show a warning message when the user is offline. */}\r\n          {!navigator.onLine && <WarningAlert text={\"Offline. New events cannot be loaded until you have an internet connection.\"} />}\r\n\r\n        </div>\r\n\r\n        {/* These are my input fields */}\r\n        <CitySearch locations={locations} numberOfEvents={numberOfEvents} updateEvents={this.updateEvents} />\r\n        <NumberOfEvents updateNumberOfEvents={number => { this.updateNumberOfEvents(number) }} currentNumberOfEvents={events.length} />\r\n\r\n        {/* Renders event cards */}\r\n        <EventList events={events} numberOfEvents={numberOfEvents} />\r\n\r\n        {/* Welcome screen covers up everything else when active. This is triggered when user is not signed in. */}\r\n        {navigator.onLine && <WelcomeScreen showWelcomeScreen={this.state.showWelcomeScreen} getAccessToken={() => { getAccessToken() }} />}\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as atatus from 'atatus-spa';\r\n// ---------Monitoring with Atatus --------------\r\nif (navigator.onLine) {\r\n  atatus.config('9d78ec172e60442196c0bde0ec64e257').install();\r\n}\r\n// ----------------------------------------------\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nif (navigator.onLine) serviceWorkerRegistration.register();\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}